AWSTemplateFormatVersion: '2010-09-09'
Description: 'This template will deploy an AWS Config rule to automatically remediate Query Logs enablement'
Parameters:
  CustomConfigRuleName:
    Description: Name that you want to give to the AWS Config Rule.
    Type: String
    Default: Kyndryl-CTO-ConfigRule-QueryLogs-Tagging
  tag1Key:
    Type: String
    Default: Kyndryl_CTO_Query_logs
    Description: The Key for the Hosted Zone and VPCs enabled with Query logs.
  tag1Value:
    Type: String
    Default: Enabled
    Description: The Value for the Hosted Zones and VPCs enabled with Query logs.
  MaxExecutionFrequency:
    Type: String
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
    Description: The maximum frequency with which AWS Config runs evaluations for a rule.
    Default: One_Hour
  CentralizedS3LoggingBucket:
    Description: Name of the S3 bucket in the logging account to send VPC Flow Logs.
    Type: String

    

Resources:
  SSMDocumentAWSEnableQueryLogs:
    Type: AWS::SSM::Document
    Properties: 
      Content:
        description: Custom  SSM Document for AWS-EnableQueryLogs
        schemaVersion: '0.3'
        assumeRole: '{{ AutomationAssumeRole }}'
        outputs:
          - CreateDNSLogConfig.message
        parameters:
          ResourceId:
            type: String
            allowedPattern: '(^Z[A-Z0-9_]{4,32}$|^vpc-[a-z0-9]{8,17}$)'
            description:
              (Required) The resource Id for which the DNS logging is created. If you
              specify 'Public' in *QueryLogType*, the resource needs to be the Hosted
              Zone ID (ex. Z111111QQQQQQQ). If you specify 'Resolver/Private', the
              resouce needs to be the VPC Id (ex. vpc-1a2b3c4d)
          QueryLogType:
            type: String
            default: Public
            description:
              (Optional) Type of configuration for the DNS logging. The allowed types
              are Public or Resolver/Private
            allowedValues:
              - Public
              - Resolver/Private
          LogDestinationArn:
            type: String
            default: ''
            description:
              (Optional) CloudWatch Log group, Amazon S3 bucket or a Kinesis stream ARN
              for the Creation of the Resolver DNS log config. Route53 Public DNS query
              Logging only supports CloudWatch Log Groups. *Note:* `if nothing is
              specified, the automation will create a CloudWatch Log Group, stream and
              the IAM Resource policy to put data in it on behalf of Route53.`
            allowedPattern:
              (^arn:(aws[a-zA-Z-]*)?:(logs|s3|kinesis):([\w+-]+)?:(\d{12})?:[\w+-]+(:|\/)?[\w+=,.@\-:\/*]+$)?
          AutomationAssumeRole:
            type: String
            default: ''
            description:
              (Optional) The ARN of the role that allows the Automation runbook to
              perform the actions on your behalf. If no role is specified, Systems
              Manager Automation uses your current IAM user permissions context to
              execute this runbook.
            allowedPattern: '(^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/[\w+=,.@-]+$)?'
        mainSteps:
          - name: ValidateResourceId
            description:
              Validates the Resource existence and checks if it's the correct Resource
              type for the *QueryLogType* (Public or Resolver/Private).
            action: 'aws:executeScript'
            inputs:
              Runtime: python3.7
              Handler: script_handler
              Script: |
                import boto3
                import re
                def script_handler(events, context):
                    ACCOUNT_ID = context["global:ACCOUNT_ID"]
                    region = context["global:REGION"]
                    ExecutionId = context["automation:EXECUTION_ID"]
                    # @Parameters
                    ResourceId = events["ResourceId"]
                    QueryLogType = events["QueryLogType"]

                    ec2 = boto3.client('ec2')
                    route53 = boto3.client('route53')

                    vpc_pattern = re.compile('^vpc-[a-z0-9]{8,17}$')
                    host_id_pattern = re.compile('^Z[A-Z0-9_]{4,32}$')

                    if QueryLogType == 'Public':
                        if (host_id_pattern.match(ResourceId)):
                            response = route53.get_hosted_zone(
                                Id = ResourceId
                            )
                            if ResourceId in response['HostedZone']['Id']:
                                return
                            else:
                                raise Exception("Resource Id not found in Route53")
                        else:
                            raise Exception("Resource Id Type is not correct")
                    elif QueryLogType == 'Resolver/Private':
                        if (vpc_pattern.match(ResourceId)):
                            response = ec2.describe_vpcs(
                                VpcIds=[ResourceId]
                            )
                            if len(response['Vpcs']) > 0:
                                return
                            else:
                                raise Exception("Resource Id not found in VPCs")
                        else:
                            raise Exception("Resource Id Type is not correct")
              InputPayload:
                ResourceId: '{{ResourceId}}'
                QueryLogType: '{{QueryLogType}}'
                LogDestinationArn: '{{LogDestinationArn}}'
            onFailure: Abort
            onCancel: Abort
            nextStep: CheckDestinationARN
            timeoutSeconds: 120
          - name: CheckDestinationARN
            action: 'aws:executeScript'
            description:
              Checks if *LogDestinationArn* parameter it's the correct Destination type
              (s3, cloudwatch log, or kinesis stream) for the *QueryLogType* (Public or
              Resolver/Private).
            inputs:
              Runtime: python3.7
              Handler: script_handler
              Script: |
                import boto3
                import time
                import re
                def script_handler(events, context):
                    RETENTION_DAYS = 14
                    ACCOUNT_ID = context["global:ACCOUNT_ID"]
                    region = context["global:REGION"]
                    ExecutionId = context["automation:EXECUTION_ID"]
                    # @Parameters
                    ResourceId = events["ResourceId"]
                    QueryLogType = events["QueryLogType"]
                    LogDestinationArn = events["LogDestinationArn"]

                    cwlog_pattern = re.compile('(^arn:(aws[a-zA-Z-]*)?:logs:([\w+-]+)?:(\d{12})?:[\w+-]+(:|\/)?[\w+=,.@\-:\/*]+$)?')
                    s3_firehose_pattern = re.compile('(^arn:(aws[a-zA-Z-]*)?:(logs|s3|firehose):([\w+-]+)?:(\d{12})?:[\w+-]+(:|\/)?[\w+=,.@\-:\/*]+$)?')


                    if QueryLogType == 'Public':
                        if LogDestinationArn == '':
                            LogDestinationArn = create_log_group_with_retention('us-east-1', ACCOUNT_ID, RETENTION_DAYS, ExecutionId)
                            return LogDestinationArn
                        elif (cwlog_pattern.match(LogDestinationArn)):
                            logGroupNamePrefix = re.sub('arn:aws:logs:([\w+-]+)?:(\d{12})?:log-group:', '', LogDestinationArn)
                            logGroupNamePrefix = re.sub('(:\*)?$', '', logGroupNamePrefix)
                            # Logs must be in us-east-1 as Route53 is global therefore the default region is N. Virginia
                            logs = boto3.client('logs', region_name='us-east-1')
                            response = logs.describe_log_groups(
                                logGroupNamePrefix=logGroupNamePrefix,
                                limit=1
                            )
                            if LogDestinationArn in response['logGroups'][0]['arn']:
                                return LogDestinationArn
                            else:
                                raise Exception("Destination ARN not found")
                        else:
                            raise Exception("Destination Type is not correct")
                    elif QueryLogType == 'Resolver/Private':
                        if LogDestinationArn == '':
                            LogDestinationArn = create_log_group_with_retention(region, ACCOUNT_ID, RETENTION_DAYS, ExecutionId)
                            return LogDestinationArn
                        elif (s3_firehose_pattern.match(LogDestinationArn)):
                            return LogDestinationArn
                        else:
                            raise Exception("Destination Type is not correct")


                def create_log_group_with_retention (region, ACCOUNT_ID, RETENTION_DAYS,
                ExecutionId):

                    logs = boto3.client('logs', region_name=region)
                    
                    try:
                        response = logs.create_log_group(
                            logGroupName='Kyndryl-CTO-ConfigureDNSQueryLogging-'+ExecutionId,
                            tags={
                                'Author': 'Created by Kyndryl-CTO-ConfigureDNSQueryLogging automation'
                            }
                        )
                        if response['ResponseMetadata']["HTTPStatusCode"] == 200:
                            time.sleep(3)
                            response = logs.put_retention_policy(
                                logGroupName='Kyndryl-CTO-ConfigureDNSQueryLogging-'+ExecutionId,
                                retentionInDays=RETENTION_DAYS
                            )
                            return 'arn:aws:logs:'+region+':'+ACCOUNT_ID+':log-group:Kyndryl-CTO-ConfigureDNSQueryLogging-'+ExecutionId+':*'
                    except Exception as e:
                        if "ResourceAlreadyExistsException" in str(e):
                            return 'arn:aws:logs:'+region+':'+ACCOUNT_ID+':log-group:Kyndryl-CTO-ConfigureDNSQueryLogging-'+ExecutionId+':*'
                        else:
                            raise Exception("Something went wrong on Log Group Creation, please check: "+"\n"+str(e))
              InputPayload:
                ResourceId: '{{ResourceId}}'
                QueryLogType: '{{QueryLogType}}'
                LogDestinationArn: '{{LogDestinationArn}}'
            nextStep: CheckResourcePolicy
            timeoutSeconds: 120
            onFailure: Abort
            onCancel: Abort
            outputs:
              - Name: message
                Selector: $.Payload
                Type: String
          - name: CheckResourcePolicy
            description:
              Checks the permission for Route53 to put logs into the CloudWatch log
              group, and creates the resource policy if it doesn't exist
            action: 'aws:executeScript'
            inputs:
              Runtime: python3.7
              Handler: script_handler
              Script: |
                import boto3
                import json
                import time
                import re
                def script_handler(events, context):

                    RETENTION_DAYS = 14
                    ACCOUNT_ID = context["global:ACCOUNT_ID"]
                    region = context["global:REGION"]
                    ExecutionId = context["automation:EXECUTION_ID"]
                    # @Parameters
                    ResourceId = events["ResourceId"]
                    QueryLogType = events["QueryLogType"]
                    LogDestinationArn = events["LogDestinationArn"]

                    logs = boto3.client('logs', region_name='us-east-1')

                    if QueryLogType == 'Public':
                        paginator = logs.get_paginator('describe_resource_policies')
                        response = paginator.paginate().build_full_result()
                        resource_policy = filter(
                            lambda policy : 
                                policy["policyName"] == 'AWSServiceRoleForRoute53',
                            response["resourcePolicies"])
                        resource_policy = list(filter(policy_filter, resource_policy))
                        if len(resource_policy) > 0:
                            return
                        else:
                            create_logs_resource_policy(ACCOUNT_ID, LogDestinationArn)
                  
                def create_logs_resource_policy(ACCOUNT_ID, LogDestinationArn):

                    policyDocument = '{ \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"Route53LogsToCloudWatchLogs\", \"Effect\": \"Allow\", \"Principal\": { \"Service\": \"route53.amazonaws.com\" }, \"Action\": [ \"logs:CreateLogStream\", \"logs:PutLogEvents\" ], \"Resource\": \"' + LogDestinationArn + '\" } ] }'
                    logs = boto3.client('logs', region_name='us-east-1')
                    try:
                        response = logs.put_resource_policy(
                            policyName="AWSServiceRoleForRoute53",
                            policyDocument=policyDocument
                        )
                        if response["resourcePolicy"]["policyName"] == "AWSServiceRoleForRoute53":
                            return
                    except Exception as e:
                        raise Exception("Something went wrong, please check: "+"\n"+str(e))

                def policy_filter(policy):
                    policy_doc = json.loads(policy["policyDocument"])
                    return policy_doc["Statement"][0]["Effect"] == "Allow" and policy_doc["Statement"][0]["Principal"]["Service"] == "route53.amazonaws.com" and any('logs:CreateLogStream' in a for a in policy_doc["Statement"][0]["Action"]) and any('logs:PutLogEvents' in a for a in policy_doc["Statement"][0]["Action"])
              InputPayload:
                ResourceId: '{{ResourceId}}'
                QueryLogType: '{{QueryLogType}}'
                LogDestinationArn: '{{LogDestinationArn}}'
            onFailure: Abort
            onCancel: Abort
            timeoutSeconds: 120
            nextStep: CreateDNSLogConfig
          - name: CreateDNSLogConfig
            description:
              Creates the DNS query logging on the selected destination, based on the
              Resource Id.
            action: 'aws:executeScript'
            timeoutSeconds: 180
            onFailure: Abort
            onCancel: Abort
            isCritical: true
            inputs:
              Runtime: python3.7
              Handler: script_handler
              Script: |
                import boto3
                import time
                import re
                import uuid

                def script_handler(events, context):
                    
                    ACCOUNT_ID = context["global:ACCOUNT_ID"]
                    region = context["global:REGION"]
                    ExecutionId = context["automation:EXECUTION_ID"]
                    # @Parameters
                    ResourceId = events["ResourceId"]
                    QueryLogType = events["QueryLogType"]
                    LogDestinationArn = events["LogDestinationArn"]

                    # @ Input Validation
                    
                    if QueryLogType == 'Public':
                        if LogDestinationArn == '':
                            LogDestinationArn='arn:aws:logs:us-east-1:'+ACCOUNT_ID+':log-group:Kyndryl-CTO-ConfigureDNSQueryLogging-'+ExecutionId
                        route53 = boto3.client('route53')
                        try:
                            response = route53.create_query_logging_config(
                                HostedZoneId=ResourceId,
                                CloudWatchLogsLogGroupArn=LogDestinationArn
                            )
                            if response["QueryLoggingConfig"]["HostedZoneId"] == ResourceId:
                                return response
                            else:
                                rollback(None, LogDestinationArn, 'us-east-1', ExecutionId)
                                raise Exception('Error creating the Route53 association' + str(response))
                        except Exception as e:
                            raise Exception("Something went wrong on the DNS query log creation, please check: "+"\n"+str(e))
                    elif QueryLogType == 'Resolver/Private':
                        if LogDestinationArn == '':
                            LogDestinationArn='arn:aws:logs:'+region+':'+ACCOUNT_ID+':log-group:Kyndryl-CTO-ConfigureDNSQueryLogging-'+ExecutionId
                        response = None
                        try:
                            route53resolver = boto3.client('route53resolver')
                            ec2 = boto3.client('ec2')
                            response = route53resolver.create_resolver_query_log_config(
                                Name='ConfigureDNSQueryLogging-'+ExecutionId,
                                DestinationArn=LogDestinationArn,
                                CreatorRequestId=str(uuid.uuid4()),
                                Tags=[
                                    {
                                        'Key':'Author',
                                        'Value':'Created by the SSM Kyndryl-CTO-ConfigureDNSQueryLogging automation'
                                    }
                                ]
                            )
                            config_id = response["ResolverQueryLogConfig"]["Id"]
                            if response["ResolverQueryLogConfig"]["DestinationArn"] in LogDestinationArn and response["ResolverQueryLogConfig"]["Id"] != None:
                                response = route53resolver.associate_resolver_query_log_config(
                                    ResolverQueryLogConfigId=config_id,
                                    ResourceId=ResourceId
                                )
                                if response["ResolverQueryLogConfigAssociation"]["ResourceId"] == ResourceId:
                                    tag_creation = ec2.create_tags( DryRun=False, Resources=[ResourceId], Tags=[ { 'Key': 'Kyndryl_CTO_Query_logs', 'Value': 'Enabled' }, ])
                                    return response;
                                else:
                                    rollback(config_id, LogDestinationArn, region, ExecutionId)
                                    raise Exception('Error creating the Resolver association' + str(response))
                            else:
                                rollback(None, LogDestinationArn, region, ExecutionId)
                                raise Exception('Error creating the Resolver log configuration.' +  str(response))
                        except Exception as e:
                            rollback(config_id, LogDestinationArn, region, ExecutionId)
                            raise Exception('Something went wrong on the Resolver DNS query log creation, please check: \n'+str(e))

                def rollback(config_id, LogDestinationArn, region, ExecutionId):

                    route53resolver = boto3.client('route53resolver')
                    logs = boto3.client('logs', region_name=region)
                    
                    if config_id != None:
                        response = route53resolver.delete_resolver_query_log_config(
                            ResolverQueryLogConfigId=config_id
                        )
                        if response["ResolverQueryLogConfig"]["Id"] != config_id:
                            raise Exception('[Rollback] Error deleting the Resolver configuration Id: '+ config_id +'\n'+ str(response))
                    if 'Kyndryl-CTO-ConfigureDNSQueryLogging' in LogDestinationArn:
                        try:
                            response = logs.delete_log_group(
                                logGroupName='Kyndryl-CTO-ConfigureDNSQueryLogging-'+ExecutionId
                            )
                            time.sleep(3)
                        except Exception as e:
                            raise Exception('[Rollback] Something went wrong on the Log group deletion, please check: \n'+str(e))
                    
                    return
              InputPayload:
                ResourceId: '{{ResourceId}}'
                QueryLogType: '{{QueryLogType}}'
                LogDestinationArn: '{{LogDestinationArn}}'
            outputs:
              - Name: message
                Selector: $.Payload
                Type: StringMap
            isEnd: true
      DocumentFormat: YAML
      DocumentType: Automation
      Name: !Sub "Kyndryl-CTO-AWS-EnableQueryLogs"
      TargetType: /AWS::EC2::QueryLog

  ConfigRemediationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ssm.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: aws-config-remediate-EnableQueryLogs-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - ec2:CreateTags
                  - ec2:DescribeVpcs
                  - firehose:ListTagsForDeliveryStream
                  - firehose:PutRecord
                  - firehose:PutRecordBatch
                  - firehose:TagDeliveryStream
                  - iam:AttachRolePolicy
                  - iam:CreatePolicy
                  - iam:CreateRole
                  - iam:CreateServiceLinkedRole
                  - iam:DeletePolicy
                  - iam:DeleteRole
                  - iam:DeleteRolePolicy
                  - iam:GetPolicy
                  - iam:GetRole
                  - iam:PassRole
                  - iam:PutRolePolicy
                  - iam:TagRole
                  - iam:UpdateRole
                  - logs:CreateLogDelivery
                  - logs:CreateLogGroup
                  - logs:DeleteLogDelivery
                  - logs:DeleteLogGroup
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:DescribeResourcePolicies
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:PutRetentionPolicy
                  - logs:UpdateLogDelivery
                  - route53:CreateQueryLoggingConfig
                  - route53:DeleteQueryLoggingConfig
                  - route53:GetHostedZone
                  - route53resolver:AssociateResolverQueryLogConfig
                  - route53resolver:CreateResolverQueryLogConfig
                  - route53resolver:DeleteResolverQueryLogConfig
                  - route53resolver:TagResource
                  - s3:GetBucketAcl
                Resource: "*"

  ConfigRuleForQueryLogsTagging: 
    Type: AWS::Config::ConfigRule
    DependsOn: 
    - SSMDocumentAWSEnableQueryLogs
    Properties: 
      ConfigRuleName: !Ref CustomConfigRuleName
      Description: ConfigPermissionToInvokeAnAutomaticRemediation
      InputParameters:
        tag1Key: !Ref tag1Key
        tag1Value: !Ref tag1Value
      Scope: 
        ComplianceResourceTypes: 
          - AWS::EC2::VPC
      Source: 
        Owner: AWS
        SourceIdentifier: REQUIRED_TAGS

  EnableQueryLogsRemediationConfiguration:
    DependsOn: 
    - ConfigRuleForQueryLogsTagging
    - SSMDocumentAWSEnableQueryLogs
    Type: AWS::Config::RemediationConfiguration
    Properties:
        ConfigRuleName: !Ref CustomConfigRuleName
        Automatic: true
        MaximumAutomaticAttempts: 5 #minutes
        RetryAttemptSeconds: 50 #seconds
        ResourceType: AWS::EC2::VPC
        Parameters:
          ResourceId: 
            ResourceValue:
              Value: 'RESOURCE_ID'
          QueryLogType:
            StaticValue:
              Values:
              - Resolver/Private
          # LogDestinationType: 
          #   StaticValue:
          #     Values: 
          #       - s3
          LogDestinationArn: 
            StaticValue:
              Values: 
                - !Sub 'arn:aws:s3:::${CentralizedS3LoggingBucket}'
          AutomationAssumeRole:
            StaticValue:
              Values: 
                - !GetAtt ConfigRemediationRole.Arn
        TargetId: Kyndryl-CTO-AWS-EnableQueryLogs
        TargetType: SSM_DOCUMENT
        TargetVersion: 1

Outputs:
  ConfigRuleForQueryLogsTaggingArn:
    Description: Arn of the AWS Config Rule to enable Query Logs
    Value: !GetAtt ConfigRuleForQueryLogsTagging.Arn
  ConfigRemediationRoleArn:
    Description: Arn of the IAM Role to perform auto-emediation
    Value: !GetAtt ConfigRemediationRole.Arn
